defmodule Mix.Tasks.Restore do
  use Mix.Task

  @shortdoc "Restore the database from CSV dumps"

  @moduledoc """
  Restores all schemas from CSV files generated by the dump task.

      mix restore
  """

  alias Reencodarr.Repo

  def run(_args) do
    Mix.Task.run("app.start")

    {:ok, modules} = :application.get_key(:reencodarr, :modules)

    schemas =
      modules
      |> Enum.filter(&({:__schema__, 1} in &1.__info__(:functions)))

    Enum.each(schemas, fn schema ->
      file_name = "#{Atom.to_string(schema)}.csv"

      if File.exists?(file_name) do
        IO.puts("Restoring #{file_name} ...")

        [header | rows] =
          File.stream!(file_name, [], :line) |> Enum.map(&String.trim_trailing(&1, "\n"))

        fields = String.split(header, ",") |> Enum.map(&String.to_atom/1)

        Enum.each(rows, fn row ->
          values = parse_csv_row(row)

          if values != nil and is_list(values) and length(values) == length(fields) do
            attrs =
              Enum.zip(fields, values)
              |> Enum.into(%{}, fn {field, value} ->
                {field, parse_field(schema, field, value)}
              end)

            struct = struct(schema, attrs)
            Repo.insert!(struct)
          end
        end)
      end
    end)
  end

  # Parses a CSV row into a list of values, handling quoted fields and escaped quotes
  defp parse_csv_row(row) do
    NimbleCSV.RFC4180.parse_string(row) |> List.first()
  end

  # Try to parse the value as JSON if the schema field is a map or list, else return as is
  defp parse_field(schema, field, value) do
    case {value, schema.__schema__(:type, field)} do
      {"", _} -> nil
      {v, :map} -> Jason.decode!(v)
      {v, :array} -> Jason.decode!(v)
      {v, :integer} -> String.to_integer(v)
      {v, :float} -> String.to_float(v)
      {v, :boolean} -> v in ["true", "1"]
      {v, :naive_datetime} -> NaiveDateTime.from_iso8601!(v)
      {v, :utc_datetime} -> DateTime.from_iso8601(v) |> elem(1)
      {v, _} -> v
    end
  rescue
    _ -> value
  end
end
