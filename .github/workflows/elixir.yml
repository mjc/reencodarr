name: Elixir CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    name: Build and test
    runs-on: nixos-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Nix store
      uses: actions/cache@v4
      with:
        path: /nix/store
        key: ${{ runner.os }}-nix-store-${{ hashFiles('flake.nix', 'flake.lock') }}
        restore-keys: |
          ${{ runner.os }}-nix-store-
    
    - name: Cache flake inputs
      uses: actions/cache@v4
      with:
        path: ~/.cache/nix
        key: ${{ runner.os }}-nix-cache-${{ hashFiles('flake.lock') }}
        restore-keys: |
          ${{ runner.os }}-nix-cache-
    
    - name: Cache Mix dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build/dev/lib
        key: ${{ runner.os }}-nixos-mix-${{ hashFiles('mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-nixos-mix-
    
    - name: Cache Mix build artifacts
      uses: actions/cache@v4
      with:
        path: _build
        key: ${{ runner.os }}-nixos-build-${{ hashFiles('mix.lock') }}-${{ hashFiles('lib/**/*.ex', 'test/**/*.exs', 'config/**/*.exs') }}
        restore-keys: |
          ${{ runner.os }}-nixos-build-${{ hashFiles('mix.lock') }}-
          ${{ runner.os }}-nixos-build-
    
    - name: Setup Nix Binary Cache
      run: |
        echo "extra-substituters = https://cache.nixos.org https://nix-community.cachix.org" | sudo tee -a /etc/nix/nix.conf
        echo "extra-trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=" | sudo tee -a /etc/nix/nix.conf
        sudo systemctl reload nix-daemon || true
    
    - name: Verify environment
      run: |
        nix develop --command bash -c "
          echo 'Elixir version:' && elixir --version
          echo 'Erlang version:' && erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().' -noshell
          echo 'ab-av1 version:' && ab-av1 --version
          echo 'mediainfo version:' && mediainfo --version
          echo 'ffmpeg version:' && ffmpeg -version | head -1
        "
    
    - name: Install dependencies
      run: nix develop --command mix deps.get
    
    - name: Compile dependencies  
      run: nix develop --command mix deps.compile
    
    - name: Set test environment
      run: echo "MIX_ENV=test" >> $GITHUB_ENV
    
    - name: Compile project
      run: nix develop --command mix compile --warnings-as-errors
    
    - name: Check formatting
      run: nix develop --command mix format --check-formatted
    
    - name: Run Credo
      run: nix develop --command mix credo --strict
    
    - name: Run tests
      run: nix develop --command mix test
